# Implementation of classic arcade game Pong

import simplegui
import random
import math

# initialize globals - pos and vel encode vertical info for paddles
WIDTH = 600
HEIGHT = 400       
BALL_RADIUS = 20
PAD_WIDTH = 8
PAD_HEIGHT = 80
HALF_PAD_WIDTH = PAD_WIDTH / 2
HALF_PAD_HEIGHT = PAD_HEIGHT / 2

pos1=[4, 200]
pos2=[600-HALF_PAD_WIDTH, 200]

ball_pos=[WIDTH/2, HEIGHT/2]
vel=[3, 3]  #for ball

score1=0
score2=0

# define event handlers

def new_game():
    global pos1, pos2,  ball_pos, vel  # these are floats
    global score1, score2  # these are ints
    pos1=[HALF_PAD_WIDTH, 200]
    pos2=[600-HALF_PAD_WIDTH, 200]
    ball_pos=[WIDTH/2, HEIGHT/2]
    vel=[3, 3]
   
    
def start_handler():
    global score1, score2
    score1=0
    score2=0
    new_game()
    
def draw(c):
    global score1, score2, pos1, pos2, ball_pos, ball_vel
 
    # update paddle's vertical position, keep paddle on the screen
        
    # draw mid line and gutters
    c.draw_line([WIDTH / 2, 0],[WIDTH / 2, HEIGHT], 1, "White")
    c.draw_line([PAD_WIDTH, 0],[PAD_WIDTH, HEIGHT], 1, "White")
    c.draw_line([WIDTH - PAD_WIDTH, 0],[WIDTH - PAD_WIDTH, HEIGHT], 1, "White")
    
    c.draw_polygon([(pos1[0]-HALF_PAD_WIDTH, pos1[1]+HALF_PAD_HEIGHT), (pos1[0]+HALF_PAD_WIDTH, pos1[1]+HALF_PAD_HEIGHT), (pos1[0]+HALF_PAD_WIDTH, pos1[1]-HALF_PAD_HEIGHT), (pos1[0]-HALF_PAD_WIDTH, pos1[1]-HALF_PAD_HEIGHT)], 0.5, "Red", "Red")
    c.draw_polygon([(pos2[0]-HALF_PAD_WIDTH, pos2[1]+HALF_PAD_HEIGHT), (pos2[0]+HALF_PAD_WIDTH, pos2[1]+HALF_PAD_HEIGHT), (pos2[0]+HALF_PAD_WIDTH, pos2[1]-HALF_PAD_HEIGHT), (pos2[0]-HALF_PAD_WIDTH, pos2[1]-HALF_PAD_HEIGHT)], 0.5, "white", "Blue")
    
    if ball_pos[0]<=BALL_RADIUS+PAD_WIDTH:
        if ball_pos[1]<=pos1[1]+HALF_PAD_HEIGHT and ball_pos[1]>=pos1[1]-HALF_PAD_HEIGHT:
            vel[0]=-1.1*vel[0]
        else:
            score2 += 1
            new_game()
    if ball_pos[0]>=600-BALL_RADIUS-PAD_WIDTH:
        if ball_pos[1]<=pos2[1]+HALF_PAD_HEIGHT and ball_pos[1]>=pos2[1]-HALF_PAD_HEIGHT:
            vel[0]=-1.1*vel[0]
        else:
            score1 +=1
            new_game()
    if ball_pos[1]<=BALL_RADIUS:
        vel[1]=-vel[1]
    if ball_pos[1]>=400-BALL_RADIUS:
        vel[1] = -vel[1]
    
    ball_pos[0]+= vel[0]
    ball_pos[1]+= vel[1]
    
    c.draw_text(str(score1), [235, 50], 36, "White")
    c.draw_text(str(score2), [335, 50], 36, "White")
    c.draw_circle(ball_pos, BALL_RADIUS, 2, "Red", "Yellow")
    # draw paddles
     
    
            
    # draw ball and scores
        
def keydown(key):
    global pos1, pos2
    
    if key==simplegui.KEY_MAP["down"]:
        pos2[1]+= 25
        pos2[1]=min(400-HALF_PAD_HEIGHT, pos2[1])
    if key==simplegui.KEY_MAP["up"]:
        pos2[1]-= 25
        pos2[1]=max(HALF_PAD_HEIGHT, pos2[1])
    if key==simplegui.KEY_MAP["w"]:
        pos1[1]-= 25
        pos1[1]=max(HALF_PAD_HEIGHT, pos1[1])
    if key==simplegui.KEY_MAP["s"]:
        pos1[1]+= 25
        pos1[1]=min(400-HALF_PAD_HEIGHT, pos1[1])
        
def keyup(key):
    global pos1, pos2
    
    if key==simplegui.KEY_MAP["down"]:
        pos2[1]+= 25
    if key==simplegui.KEY_MAP["up"]:
        pos2[1]-= 25
    if key==simplegui.KEY_MAP["w"]:
        pos1[1]-= 25
    if key==simplegui.KEY_MAP["s"]:
        pos1[1]+= 25

# create frame
frame = simplegui.create_frame("Pong", WIDTH, HEIGHT)
frame.add_button("Restart", start_handler)
frame.set_draw_handler(draw)
frame.set_keydown_handler(keydown)
frame.set_keyup_handler(keyup)


# start frame
frame.start()
